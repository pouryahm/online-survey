generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String               @id @default(cuid())
  email               String               @unique
  password            String
  name                String?
  surveys             Survey[]
  refreshTokens       RefreshToken[]
  passwordResetTokens PasswordResetToken[]
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
}

/// -------------------- Phase 2: Survey Builder --------------------

enum QuestionType {
  TEXT
  SINGLE_CHOICE
  MULTI_CHOICE
  NUMBER
  DATE
}

model Survey {
  id          String     @id @default(cuid())
  ownerId     String
  owner       User       @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  title       String
  description String?
  isPublished Boolean    @default(false)
  slug        String?    @unique
  questions   Question[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([ownerId])
}

model Question {
  id       String       @id @default(cuid())
  surveyId String
  survey   Survey       @relation(fields: [surveyId], references: [id], onDelete: Cascade)
  type     QuestionType
  title    String
  required Boolean      @default(false)
  order    Int          @default(0)
  choices  Choice[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([surveyId])
  @@index([surveyId, order])
}

model Choice {
  id         String   @id @default(cuid())
  questionId String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  label      String
  value      String
  order      Int      @default(0)
}

model RefreshToken {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  tokenHash String    @unique
  userAgent String?
  ip        String?
  createdAt DateTime  @default(now())
  expiresAt DateTime
  revokedAt DateTime?

  @@index([userId])
  @@index([userId, revokedAt])
}

model PasswordResetToken {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  tokenHash String    @unique
  expiresAt DateTime
  usedAt    DateTime?
  ip        String?
  userAgent String?
  createdAt DateTime  @default(now())

  @@index([userId])
}
